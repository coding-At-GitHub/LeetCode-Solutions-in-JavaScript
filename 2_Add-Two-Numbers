/*
2. Add Two Numbers
You are given two non-empty linked lists representing two non-negative integers. 
The digits are stored in reverse order, and each of their nodes contains a single digit.
Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
*/


/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} l1
 * @param {ListNode} l2
 * @return {ListNode}
 */
var addTwoNumbers = function(l1, l2) {
  let dummyHead = new ListNode(0); // Create a dummy head node for the result
    let curr = dummyHead; // Pointer to the current node in the result

    let curr1 = l1;
    let curr2 = l2;
    let carry = 0;

    while (curr1 !== null || curr2 !== null) {
        let val1 = (curr1 !== null) ? curr1.val : 0;
        let val2 = (curr2 !== null) ? curr2.val : 0;

        let sum = val1 + val2 + carry;
        carry = Math.floor(sum / 10); // Update carry
        let digit = sum % 10;

        curr.next = new ListNode(digit); // Create a new node for the result
        curr = curr.next; // Move the current pointer forward

        if (curr1 !== null) curr1 = curr1.next;
        if (curr2 !== null) curr2 = curr2.next;
    }

    if (carry > 0) {
        curr.next = new ListNode(carry); // Create a new node if carry remains
    }

    return dummyHead.next; // Return the result excluding the dummy head

};
